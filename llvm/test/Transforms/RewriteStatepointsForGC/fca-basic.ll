; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -rewrite-statepoints-for-gc < %s | FileCheck %s
; RUN: opt -S -passes=rewrite-statepoints-for-gc < %s | FileCheck %s

%R1 = type {i32, i8 addrspace(1)* }

declare %R1 @extfun1(i32)
declare %R1 @extfun2(%R1)

define %R1 @f0(i32) gc "statepoint-example" {
; CHECK-LABEL: @f0(
; CHECK-NEXT:    [[STATEPOINT_TOKEN:%.*]] = call token (i64, i32, [[R1:%.*]] (i32)*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_s_R1si32f(i64 2882400000, i32 0, [[R1]] (i32)* @extfun1, i32 1, i32 0, i32 15, i32 0, i32 0)
; CHECK-NEXT:    [[VAL3:%.*]] = call [[R1]] @llvm.experimental.gc.result.s_R1s(token [[STATEPOINT_TOKEN]])
; CHECK-NEXT:    [[VAL_EX:%.*]] = extractvalue [[R1]] [[VAL3]], 0
; CHECK-NEXT:    [[VAL_EX1:%.*]] = extractvalue [[R1]] [[VAL3]], 1
; CHECK-NEXT:    [[STATEPOINT_TOKEN4:%.*]] = call token (i64, i32, [[R1]] ([[R1]])*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_s_R1ss_R1sf(i64 2882400000, i32 0, [[R1]] ([[R1]])* @extfun2, i32 1, i32 0, [[R1]] [[VAL3]], i32 0, i32 0) [ "gc-live"(i8 addrspace(1)* [[VAL_EX1]]) ]
; CHECK-NEXT:    [[VAL_EX1_RELOCATED:%.*]] = call coldcc i8 addrspace(1)* @llvm.experimental.gc.relocate.p1i8(token [[STATEPOINT_TOKEN4]], i32 0, i32 0)
; CHECK-NEXT:    [[VAL_RE:%.*]] = insertvalue [[R1]] undef, i32 [[VAL_EX]], 0
; CHECK-NEXT:    [[VAL_RE2:%.*]] = insertvalue [[R1]] [[VAL_RE]], i8 addrspace(1)* [[VAL_EX1_RELOCATED]], 1
; CHECK-NEXT:    ret [[R1]] [[VAL_RE2]]
;
  %val = call %R1 @extfun1(i32 15)

  %val2 = call %R1 @extfun2(%R1 %val)

  ret %R1 %val
}
