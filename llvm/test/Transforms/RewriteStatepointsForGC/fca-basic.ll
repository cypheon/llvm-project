; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -rewrite-statepoints-for-gc < %s | FileCheck %s
; RUN: opt -S -passes=rewrite-statepoints-for-gc < %s | FileCheck %s

%R1 = type {i32, i8 addrspace(1)* }

declare %R1 @extfun1(i32)
declare %R1 @extfun2(%R1)

define %R1 @f0(i32) gc "statepoint-example" {
; CHECK-LABEL: @f0(
; CHECK-NEXT:    [[STATEPOINT_TOKEN:%.*]] = call token (i64, i32, [[R1:%.*]] (i32)*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_s_R1si32f(i64 2882400000, i32 0, [[R1]] (i32)* @extfun1, i32 1, i32 0, i32 15, i32 0, i32 0)
; CHECK-NEXT:    [[VAL3:%.*]] = call [[R1]] @llvm.experimental.gc.result.s_R1s(token [[STATEPOINT_TOKEN]])
; CHECK-NEXT:    [[VAL_EX:%.*]] = extractvalue [[R1]] [[VAL3]], 0
; CHECK-NEXT:    [[VAL_EX1:%.*]] = extractvalue [[R1]] [[VAL3]], 1
; CHECK-NEXT:    [[STATEPOINT_TOKEN4:%.*]] = call token (i64, i32, [[R1]] ([[R1]])*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_s_R1ss_R1sf(i64 2882400000, i32 0, [[R1]] ([[R1]])* @extfun2, i32 1, i32 0, [[R1]] [[VAL3]], i32 0, i32 0) [ "gc-live"(i8 addrspace(1)* [[VAL_EX1]]) ]
; CHECK-NEXT:    [[VAL_EX1_RELOCATED:%.*]] = call coldcc i8 addrspace(1)* @llvm.experimental.gc.relocate.p1i8(token [[STATEPOINT_TOKEN4]], i32 0, i32 0)
; CHECK-NEXT:    [[VAL_RE:%.*]] = insertvalue [[R1]] undef, i32 [[VAL_EX]], 0
; CHECK-NEXT:    [[VAL_RE2:%.*]] = insertvalue [[R1]] [[VAL_RE]], i8 addrspace(1)* [[VAL_EX1_RELOCATED]], 1
; CHECK-NEXT:    ret [[R1]] [[VAL_RE2]]
;
  %val = call %R1 @extfun1(i32 15)

  %val2 = call %R1 @extfun2(%R1 %val)

  ret %R1 %val
}

define private fastcc %R1 @branching() gc "statepoint-example" {
; CHECK-LABEL: @branching(
; CHECK-NEXT:  glbl_e199:
; CHECK-NEXT:    br i1 undef, label [[GLBL_T320:%.*]], label [[GLBL_F322:%.*]]
; CHECK:       glbl_t320:
; CHECK-NEXT:    br label [[GLBL_TE321:%.*]]
; CHECK:       glbl_te321:
; CHECK-NEXT:    br label [[GLBL_E324:%.*]]
; CHECK:       glbl_f322:
; CHECK-NEXT:    br label [[GLBL_T382:%.*]]
; CHECK:       glbl_t382:
; CHECK-NEXT:    br label [[GLBL_TE383:%.*]]
; CHECK:       glbl_te383:
; CHECK-NEXT:    br label [[GLBL_E386:%.*]]
; CHECK:       glbl_e386:
; CHECK-NEXT:    [[STATEPOINT_TOKEN:%.*]] = call fastcc token (i64, i32, [[R1:%.*]] (i32)*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_s_R1si32f(i64 2882400000, i32 0, [[R1]] (i32)* @extfun1, i32 1, i32 0, i32 16, i32 0, i32 0)
; CHECK-NEXT:    [[T4121:%.*]] = call [[R1]] @llvm.experimental.gc.result.s_R1s(token [[STATEPOINT_TOKEN]])
; CHECK-NEXT:    br label [[GLBL_FE323:%.*]]
; CHECK:       glbl_fe323:
; CHECK-NEXT:    br label [[GLBL_E324]]
; CHECK:       glbl_e324:
; CHECK-NEXT:    [[T222_PN:%.*]] = phi [[R1]] [ undef, [[GLBL_TE321]] ], [ [[T4121]], [[GLBL_FE323]] ]
; CHECK-NEXT:    ret [[R1]] undef
;
glbl_e199:
  br i1 undef, label %glbl_t320, label %glbl_f322

glbl_t320:                                        ; preds = %glbl_e199
  br label %glbl_te321

glbl_te321:                                       ; preds = %glbl_t320
  br label %glbl_e324

glbl_f322:                                        ; preds = %glbl_e199
  br label %glbl_t382

glbl_t382:                                        ; preds = %glbl_f322
  br label %glbl_te383

glbl_te383:                                       ; preds = %glbl_t382
  br label %glbl_e386

glbl_e386:                                        ; preds = %glbl_te383
  %t412 = call fastcc %R1 @extfun1(i32 16)
  br label %glbl_fe323

glbl_fe323:                                       ; preds = %glbl_e386
  br label %glbl_e324

glbl_e324:                                        ; preds = %glbl_fe323, %glbl_te321
  %t222.pn = phi %R1 [ undef, %glbl_te321 ], [ %t412, %glbl_fe323 ]
  ret %R1 undef
}
